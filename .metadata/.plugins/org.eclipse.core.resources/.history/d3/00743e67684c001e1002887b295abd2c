<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

<!-- 
	 1. 시큐리티는 인증을 담당하는 AuthenticationManager(인증매니저)가 존재합니다.
	 	 이 인증매니저는 AuthenticationProvider라는 구현체를 이용해서 처리합니다.
	 	 AuthenticationProvider 인터페이스는 화면에서 입력한 로그인 정보와 DB에서 가져온 사용자의 정보를
	 	 비교해주는 인터페이스입니다.
	 	 DB에서 사용자의 정보를 가져오기 위해 UserDetailsService 구현체를 이용합니다.
	 	 
	 2. UserDetailsService 구현체의 빈 이름을 'user-service-ref' 속성에 설정합니다.
	 	UserDetailsService 구현체는 유저 정보를 가져오는 클래스입니다.
	 	
	 3. servlet-context.xml의
	 	 <bean id="bcryptPasswordEncoder"
	 	 		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	 	 		를 root-context.xml로 옮겨옵니다.
	 	 		
	 	 servlet-conetext.xml에서 설정된 빈은 security-context.xml에서 사용할 수 없습니다.
	 	 
	 4. <security:password-encoder ref="bcryptPasswordEncoder" /> :
	 	password-encoder: 비밀번호 암호화에 사용될 정보를 설정합니다.
	 	bcryptPasswordEncoder는 root-context.xml에서 설정한 빈의 이름입니다.	 				 
 -->
 		<!-- pattern=pattern="/resources/**" access="permitAll"  : 정적 리소스는 모두 접근 가능
 			 access="hasRole('ROLE_ADMIN')" : 'ROLE_ADMIN' 권한이 있어야 접근 가능
 			 access="hasAnyRole('Role_Member', 'ROLE_ADMIN')" : 'ROLE_MEMBER'나 'ROLE_ADMIN' 있어야 접근가능
 		
 		 -->
 		<security:http>
 		
 		<security:intercept-url pattern="/resources/**"			access="permitAll" />
 		<security:intercept-url pattern="/member/login"			access="permitAll" />
 		<security:intercept-url pattern="/member/join"			access="permitAll" />
 		<security:intercept-url pattern="/member/idcheck"		access="permitAll" />
 		<security:intercept-url pattern="/member/joinProcess"	access="permitAll" />
 		<security:intercept-url pattern="/member/list"			access="hasRole('ROLE_ADMIN')" />
 		<security:intercept-url pattern="/**"					access="hasAnyRole('ROLE_MEMBER', 'ROLE_ADMIN')" />
 		
				<security:form-login login-page="/member/login"
									 login-processing-url="/member/loginProcess"
									 username-parameter="id"
									 password-parameter="password"
									 authentication-failure-handler-ref="loginFailHandler"
									 authentication-success-handler-ref="loginSuccessHandler"
									 />
									 
				<security:access-denied-handler ref="customAccessDeniedHandler" />
				
				<!-- 
					 (1) data-source-ref : 참조할 DataSource bean 을 지정합니다.
					 (2) remember-me-parameter : 웹 화면에서 로그인할 때 대부분 'remember-me'는 체크박스를 이용합니다.
					 	 이때 체크박스의 name 속성값을 지정합니다.
					 (3) remember-me-cookie : 브라우저에 보관되는 쿠키의 이름을 지정합니다.
					 	 기본값은 'remember-me' 입니다.
					 (4) token-validity-seconds : 쿠키의 유효시간을 지정합니다.
				-->
				<security:remember me
							data-source-ref="dataSource"
							remember-me-parameter="remember-me"
							remember-me-cookie="remember-me"
							token-validity-seconds="2419200" /> <!-- 4주 -->	 	 	 
				
				
				
				
				 
									 
		</security:http>
		
			<security:authentication-manager>
                     <security:authentication-provider 	
                            user-service-ref="customUserDetailsService">
			               <security:password-encoder ref="bcryptPasswordEncoder" />
		            </security:authentication-provider>
				</security:authentication-manager>
				
	  <!-- com.naver.security.CustomUserDetailsService.java의 @Service를 인식하기 위해 사용합니다. -->			
		<context:component-scan base-package="com.naver.security"/>
</beans>